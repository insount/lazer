import cv2
import numpy as np
from PyQt6.QtWidgets import QFileDialog, QMessageBox, QDialog, QLabel, QHBoxLayout, QVBoxLayout
from PyQt6.QtGui import QImage, QPixmap
from PyQt6.QtCore import Qt, QTimer


class ImageLoader:
    def __init__(self):
        self.original_image = None
        self.binary_image = None
        self.laser_simulation = None
        self.points = []
        self.dialog = None
        self.laser_timer = None
        self.current_index = 0  # –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

    def load_image(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        file_path, _ = QFileDialog.getOpenFileName(None, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "", "Images (*.bmp *.png *.jpg)")
        if not file_path:
            return None

        self.original_image = cv2.imread(file_path)
        self.binary_image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)

        if self.binary_image is None:
            QMessageBox.warning(None, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None

        return file_path

    def process_image(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤—ã–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏"""
        if self.binary_image is None:
            return None

        _, self.binary_image = cv2.threshold(self.binary_image, 127, 255, cv2.THRESH_BINARY)

        self.points = []
        height, width = self.binary_image.shape

        for y in range(height):
            for x in range(width):
                if self.binary_image[y, x] == 0:
                    self.points.append((x, y))

        print(f"üîπ –ù–∞–π–¥–µ–Ω–æ {len(self.points)} —Ç–æ—á–µ–∫ –¥–ª—è –ª–∞–∑–µ—Ä–∞")  # ‚úÖ –û—Ç–ª–∞–¥–∫–∞

        return self.points

    def create_laser_simulation(self):
        """–°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–µ –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if self.binary_image is None:
            return None

        height, width = self.binary_image.shape
        self.laser_simulation = np.full((height, width, 3), 255, dtype=np.uint8)  # ‚úÖ –ë–µ–ª—ã–π —Ñ–æ–Ω (RGB)

    def show_images(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ª–∞–∑–µ—Ä–∞"""
        self.dialog = QDialog()
        self.dialog.setWindowTitle("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.dialog.setAttribute(Qt.WidgetAttribute.WA_DeleteOnClose)

        layout = QVBoxLayout(self.dialog)

        self.original_label = QLabel()
        self.binary_label = QLabel()
        self.laser_label = QLabel()

        layout_images = QHBoxLayout()
        layout_images.addWidget(self.original_label)
        layout_images.addWidget(self.binary_label)
        layout_images.addWidget(self.laser_label)

        layout.addLayout(layout_images)
        self.dialog.setLayout(layout)

        # ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if self.laser_simulation is None:
            self.create_laser_simulation()

        self.update_image(self.original_label, self.original_image, max_height=300)
        self.update_image(self.binary_label, self.binary_image, max_height=300)
        self.update_image(self.laser_label, self.laser_simulation, max_height=300)

        self.dialog.adjustSize()
        self.dialog.setFixedSize(min(self.dialog.width(), 900), min(self.dialog.height(), 500))

        self.start_laser_animation()  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.dialog.exec()

    def start_laser_animation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –ª–∞–∑–µ—Ä–∞"""
        if not self.points:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø—É—Å—Ç. –õ–∞–∑–µ—Ä –Ω–µ –±—É–¥–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω!")
            return

        self.current_index = 0
        self.laser_timer = QTimer()
        self.laser_timer.timeout.connect(self.animate_laser)

        # ‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ 5 —Å–µ–∫—É–Ω–¥
        duration_ms = 5000
        step_time = max(duration_ms // len(self.points), 10)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ 10 –º—Å
        print(f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–π–º–µ—Ä–∞: {step_time} –º—Å")  # ‚úÖ –û—Ç–ª–∞–¥–∫–∞

        self.laser_timer.setInterval(step_time)
        self.laser_timer.start()

    def animate_laser(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ª–∞–∑–µ—Ä–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —á—ë—Ä–Ω—ã–π üî≤ —Å–ª–µ–¥ –±–µ–∑ –∫—Ä–∞—Å–Ω–æ–π —Ç–æ—á–∫–∏"""
        if self.current_index >= len(self.points):
            self.laser_timer.stop()
            print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return

        step_size = 100  # ‚úÖ –õ–∞–∑–µ—Ä –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É 50 —Ç–æ—á–µ–∫ –∑–∞ —à–∞–≥ (—É—Å–∫–æ—Ä—è–µ–º)

        end_index = min(self.current_index + step_size, len(self.points))

        # ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—ë—Ä–Ω—ã–π —Å–ª–µ–¥
        for i in range(self.current_index, end_index):
            x, y = self.points[i]
            self.laser_simulation[y, x] = [0, 0, 0]  # ‚ö´ –ß—ë—Ä–Ω—ã–π —Å–ª–µ–¥

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º QLabel
        self.update_image(self.laser_label, self.laser_simulation, max_height=300)
        self.dialog.repaint()

        self.current_index += step_size

        if self.current_index >= len(self.points):
            self.laser_timer.stop()


    def update_image(self, label, img, max_height=300):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç QLabel —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —É–º–µ–Ω—å—à–∞—è –µ–≥–æ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏"""
        if img is None or img.size == 0:
            label.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")  # ‚úÖ –ó–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            return

        height, width = img.shape[:2]

        # ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        if height > max_height:
            scale_factor = max_height / height
            new_width = int(width * scale_factor)
            new_height = max_height
            img = cv2.resize(img, (new_width, new_height), interpolation=cv2.INTER_AREA)

        try:
            bytes_per_line = new_width * 3 if len(img.shape) == 3 else new_width
            format_type = QImage.Format.Format_RGB888 if len(img.shape) == 3 else QImage.Format.Format_Grayscale8
            qimage = QImage(img.data, new_width, new_height, bytes_per_line, format_type)
            pixmap = QPixmap.fromImage(qimage)

            label.setPixmap(pixmap)
            label.setFixedSize(new_width, new_height)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

