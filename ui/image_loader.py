import cv2
import numpy as np
from PyQt6.QtWidgets import QFileDialog, QMessageBox
from PyQt6.QtCore import Qt


class ImageLoader:
    def __init__(self):
        self.original_image = None
        self.binary_image = None
        self.laser_simulation = None
        self.points = []

    def load_image(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        file_path, _ = QFileDialog.getOpenFileName(
            None,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "",
            "Images (*.bmp *.png *.jpg)"
        )
        if not file_path:
            return None

        self.original_image = cv2.imread(file_path)
        self.binary_image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)

        if self.binary_image is None:
            QMessageBox.warning(None, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None

        return file_path

    def process_image(self):
        """–ë–∏–Ω–∞—Ä–∏–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–æ—á–∫–∏, –≥–¥–µ –ø–∏–∫—Å–µ–ª—å —á—ë—Ä–Ω—ã–π (0)."""
        if self.binary_image is None:
            return None

        _, self.binary_image = cv2.threshold(
            self.binary_image, 127, 255, cv2.THRESH_BINARY
        )

        self.points = []
        height, width = self.binary_image.shape

        for y in range(height):
            for x in range(width):
                # –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å —á—ë—Ä–Ω—ã–π
                if self.binary_image[y, x] == 0:
                    self.points.append((x, y))

        print(f"üîπ –ù–∞–π–¥–µ–Ω–æ {len(self.points)} —Ç–æ—á–µ–∫ –¥–ª—è –ª–∞–∑–µ—Ä–∞")
        return self.points

    def create_laser_simulation(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –±–µ–ª–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (h√ów√ó3)
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ ¬´–ø—Ä–æ–∂–∏–≥–∞¬ª –ø–∏–∫—Å–µ–ª–µ–π.
        """
        if self.binary_image is None:
            return None

        height, width = self.binary_image.shape
        self.laser_simulation = np.full((height, width, 3), 255, dtype=np.uint8)
        return self.laser_simulation
